<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F407_HSE_TEST1\STM32F407_HSE_TEST1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F407_HSE_TEST1\STM32F407_HSE_TEST1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Apr 15 01:44:48 2023
<BR><P>
<H3>Maximum Stack Usage =        156 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
MatrixInit &rArr; arm_mat_mult_f32
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9b]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[101]">AX_GetAngle</a> from terminal_cmd_handler.o(i.AX_GetAngle) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[104]">AX_GetLoad</a> from terminal_cmd_handler.o(i.AX_GetLoad) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[fc]">AX_SetAngle</a> from terminal_cmd_handler.o(i.AX_SetAngle) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[108]">AX_SetJointMode</a> from terminal_cmd_handler.o(i.AX_SetJointMode) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[109]">AX_SetMovingSpeed</a> from terminal_cmd_handler.o(i.AX_SetMovingSpeed) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[107]">AX_SetWheelMode</a> from terminal_cmd_handler.o(i.AX_SetWheelMode) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[32]">Action_Cmd</a> from dynamixel_protocol10.o(i.Action_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[5f]">AddButton</a> from button.o(i.AddButton) referenced 2 times from button.o(.data)
 <LI><a href="#[36]">BulkRead_Cmd</a> from dynamixel_protocol10.o(i.BulkRead_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[83]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9d]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9e]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9f]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9c]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c9]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ca]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cb]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c8]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[110]">CheckEncoder</a> from terminal_cmd_handler.o(i.CheckEncoder) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[f8]">ControlButtons_Callback</a> from robot_behavior_routine.o(i.ControlButtons_Callback) referenced from button_task.o(i.Task)
 <LI><a href="#[1e]">CreateTask</a> from odometry_task.o(i.CreateTask) referenced 28 times from odometry_task.o(.data)
 <LI><a href="#[10e]">DC</a> from terminal_cmd_handler.o(i.DC) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[10f]">DCConst</a> from terminal_cmd_handler.o(i.DCConst) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[d7]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[111]">DCSort</a> from terminal_cmd_handler.o(i.DCSort) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[94]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[95]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[96]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[97]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[98]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[99]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9a]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b8]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c1]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c2]">DMA2_Stream1_IRQHandler</a> from irq_process.o(i.DMA2_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c3]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c4]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c5]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cd]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ce]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cf]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[86]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">Disable</a> from l6474_drvr.o(i.Disable) referenced 8 times from l6474_drvr.o(.data)
 <LI><a href="#[2d]">DisableLED</a> from dynamixel_ax.o(i.DisableLED) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[c6]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c7]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8f]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b1]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[90]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[91]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[92]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[93]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a0]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">Enable</a> from l6474_drvr.o(i.Enable) referenced 8 times from l6474_drvr.o(.data)
 <LI><a href="#[2c]">EnableLED</a> from dynamixel_ax.o(i.EnableLED) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[10d]">Experiment</a> from terminal_cmd_handler.o(i.Experiment) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[8d]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b9]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d9]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">FactoryReset_Cmd</a> from dynamixel_protocol10.o(i.FactoryReset_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[6d]">GetAllEncoderCounts</a> from encoder_board_drvr.o(i.GetAllEncoderCounts) referenced 2 times from encoder_board_drvr.o(.data)
 <LI><a href="#[27]">GetAngle</a> from dynamixel_ax.o(i.GetAngle) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[5b]">GetCoord</a> from odometry.o(i.GetCoord) referenced 2 times from odometry.o(.data)
 <LI><a href="#[6c]">GetEncoderCounts</a> from encoder_board_drvr.o(i.GetEncoderCounts) referenced 2 times from encoder_board_drvr.o(.data)
 <LI><a href="#[2]">GetParam</a> from l6474_drvr.o(i.GetParam) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[2b]">GetPresentLoad</a> from dynamixel_ax.o(i.GetPresentLoad) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[4c]">GetPresentPosisition</a> from stepper.o(i.GetPresentPosisition) referenced 2 times from stepper.o(.data)
 <LI><a href="#[3d]">GetRangeTPM</a> from maxon.o(i.GetRangeTPM) referenced 2 times from maxon.o(.data)
 <LI><a href="#[100]">GetRobotCoord</a> from terminal_cmd_handler.o(i.GetRobotCoord) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[fe]">GetRobotSpeed</a> from terminal_cmd_handler.o(i.GetRobotSpeed) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[5d]">GetSpeed</a> from odometry.o(i.GetSpeed) referenced 2 times from odometry.o(.data)
 <LI><a href="#[60]">GetState</a> from button.o(i.GetState) referenced 2 times from button.o(.data)
 <LI><a href="#[3]">GetStatus</a> from l6474_drvr.o(i.GetStatus) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[3f]">GetTPM</a> from maxon.o(i.GetTPM) referenced 2 times from maxon.o(.data)
 <LI><a href="#[1f]">GetTaskHandle</a> from odometry_task.o(i.GetTaskHandle) referenced 28 times from odometry_task.o(.data)
 <LI><a href="#[41]">GetTotalTicks</a> from maxon.o(i.GetTotalTicks) referenced 2 times from maxon.o(.data)
 <LI><a href="#[45]">Get_Request</a> from terminal.o(i.Get_Request) referenced 4 times from terminal.o(.data)
 <LI><a href="#[118]">GripperCalibration</a> from terminal_cmd_handler.o(i.GripperCalibration) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[102]">GrubPile</a> from terminal_cmd_handler.o(i.GrubPile) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[105]">GrubPileSatus</a> from terminal_cmd_handler.o(i.GrubPileSatus) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[d8]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[81]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">HardReset</a> from l6474_drvr.o(i.HardReset) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[a9]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a8]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ab]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[aa]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d2]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d1]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">Init</a> from stepper.o(i.Init) referenced 4 times from stepper.o(.data)
 <LI><a href="#[f]">LL_DMA_ClearFlag_TC0</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC0) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[10]">LL_DMA_ClearFlag_TC1</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC1) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[11]">LL_DMA_ClearFlag_TC2</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC2) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[12]">LL_DMA_ClearFlag_TC3</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC3) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[13]">LL_DMA_ClearFlag_TC4</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC4) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[14]">LL_DMA_ClearFlag_TC5</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC5) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[15]">LL_DMA_ClearFlag_TC6</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC6) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[16]">LL_DMA_ClearFlag_TC7</a> from usartx_communication.o(i.LL_DMA_ClearFlag_TC7) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[b]">MatrixInit</a> from kinematics.o(i.MatrixInit) referenced 2 times from kinematics.o(.data)
 <LI><a href="#[82]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">Motor1_Init</a> from stepper.o(i.Motor1_Init) referenced 2 times from stepper.o(.data)
 <LI><a href="#[47]">Motor2_Init</a> from stepper.o(i.Motor2_Init) referenced 2 times from stepper.o(.data)
 <LI><a href="#[48]">Motor3_Init</a> from stepper.o(i.Motor3_Init) referenced 2 times from stepper.o(.data)
 <LI><a href="#[49]">Motor4_Init</a> from stepper.o(i.Motor4_Init) referenced 2 times from stepper.o(.data)
 <LI><a href="#[80]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[cc]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b3]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d4]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d3]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d6]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d5]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[116]">OpenGate</a> from terminal_cmd_handler.o(i.OpenGate) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[114]">OptimalSort</a> from terminal_cmd_handler.o(i.OptimalSort) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[8a]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[87]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">Ping</a> from dynamixel_ax.o(i.Ping) referenced 4 times from dynamixel_ax.o(.data)
 <LI><a href="#[f9]">Ping</a> from terminal_cmd_handler.o(i.Ping) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[2e]">Ping_Cmd</a> from dynamixel_protocol10.o(i.Ping_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[61]">PollButtons</a> from button.o(i.PollButtons) referenced 2 times from button.o(.data)
 <LI><a href="#[39]">Protocol</a> from dynamixel_protocol10.o(i.Protocol) referenced 6 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[fb]">Punch</a> from terminal_cmd_handler.o(i.Punch) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[8e]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b2]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8c]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">ReadBytes</a> from serial_protocol.o(i.ReadBytes) referenced 2 times from serial_protocol.o(.data)
 <LI><a href="#[2f]">Read_Cmd</a> from dynamixel_protocol10.o(i.Read_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[34]">Reboot_Cmd</a> from dynamixel_protocol10.o(i.Reboot_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[38]">Receive_Request</a> from dynamixel_protocol10.o(i.Receive_Request) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[31]">RegWrite_Cmd</a> from dynamixel_protocol10.o(i.RegWrite_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[103]">ReleasePile</a> from terminal_cmd_handler.o(i.ReleasePile) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[106]">ReleasePileSatus</a> from terminal_cmd_handler.o(i.ReleasePileSatus) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[7f]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">Reset_RX_Timeout</a> from usartx_communication.o(i.Reset_RX_Timeout) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[ba]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ac]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ad]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[bc]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[85]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">Send_Response</a> from dynamixel_protocol10.o(i.Send_Response) referenced 6 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[26]">SetAngle</a> from dynamixel_ax.o(i.SetAngle) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[5a]">SetCoord</a> from odometry.o(i.SetCoord) referenced 2 times from odometry.o(.data)
 <LI><a href="#[7]">SetCurrentLimit</a> from l6474_drvr.o(i.SetCurrentLimit) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[8]">SetCurrentLimit_mA</a> from l6474_drvr.o(i.SetCurrentLimit_mA) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[9]">SetDirection</a> from l6474_drvr.o(i.SetDirection) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[23]">SetID</a> from dynamixel_ax.o(i.SetID) referenced 4 times from dynamixel_ax.o(.data)
 <LI><a href="#[29]">SetJointMode</a> from dynamixel_ax.o(i.SetJointMode) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[52]">SetMotorSpeed</a> from rc_servo.o(i.SetMotorSpeed) referenced 2 times from rc_servo.o(.data)
 <LI><a href="#[2a]">SetMovingSpeed</a> from dynamixel_ax.o(i.SetMovingSpeed) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[10a]">SetPWM</a> from terminal_cmd_handler.o(i.SetPWM) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[51]">SetPWMDutyCycle</a> from rc_servo.o(i.SetPWMDutyCycle) referenced 2 times from rc_servo.o(.data)
 <LI><a href="#[1]">SetParam</a> from l6474_drvr.o(i.SetParam) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[3c]">SetRangeTPM</a> from maxon.o(i.SetRangeTPM) referenced 2 times from maxon.o(.data)
 <LI><a href="#[ff]">SetRobotCoord</a> from terminal_cmd_handler.o(i.SetRobotCoord) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[fd]">SetRobotSpeed</a> from terminal_cmd_handler.o(i.SetRobotSpeed) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[53]">SetServoAngle</a> from rc_servo.o(i.SetServoAngle) referenced 2 times from rc_servo.o(.data)
 <LI><a href="#[5c]">SetSpeed</a> from odometry.o(i.SetSpeed) referenced 2 times from odometry.o(.data)
 <LI><a href="#[6]">SetStepMode</a> from l6474_drvr.o(i.SetStepMode) referenced 2 times from l6474_drvr.o(.data)
 <LI><a href="#[3e]">SetTPM</a> from maxon.o(i.SetTPM) referenced 2 times from maxon.o(.data)
 <LI><a href="#[40]">SetTotalTicks</a> from maxon.o(i.SetTotalTicks) referenced 2 times from maxon.o(.data)
 <LI><a href="#[28]">SetWheelMode</a> from dynamixel_ax.o(i.SetWheelMode) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[4a]">SetZeroPosisition</a> from stepper.o(i.SetZeroPosisition) referenced 2 times from stepper.o(.data)
 <LI><a href="#[1c]">Set_RX_Timeout</a> from usartx_communication.o(i.Set_RX_Timeout) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[10b]">Set_stepper_angle</a> from terminal_cmd_handler.o(i.Set_stepper_angle) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[112]">Sort</a> from terminal_cmd_handler.o(i.Sort) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[113]">SortSatus</a> from terminal_cmd_handler.o(i.SortSatus) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[c]">Speed_To_TPM</a> from kinematics.o(i.Speed_To_TPM) referenced 2 times from kinematics.o(.data)
 <LI><a href="#[119]">StartGame</a> from terminal_cmd_handler.o(i.StartGame) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[19]">StartRX</a> from usartx_communication.o(i.StartRX) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[18]">StartTX</a> from usartx_communication.o(i.StartTX) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[4b]">StepToPosisition</a> from stepper.o(i.StepToPosisition) referenced 2 times from stepper.o(.data)
 <LI><a href="#[4d]">Stop</a> from stepper.o(i.Stop) referenced 2 times from stepper.o(.data)
 <LI><a href="#[1a]">StopRX</a> from usartx_communication.o(i.StopRX) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[1b]">StopTX</a> from usartx_communication.o(i.StopTX) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[10c]">Stop_stepper</a> from terminal_cmd_handler.o(i.Stop_stepper) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[117]">SwitchEmp</a> from terminal_cmd_handler.o(i.SwitchEmp) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[35]">SyncWrite_Cmd</a> from dynamixel_protocol10.o(i.SyncWrite_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[88]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[db]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[8b]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a1]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a4]">TIM1_CC_IRQHandler</a> from irq_process.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a3]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a2]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a5]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a6]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a7]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[bb]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[bf]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c0]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b4]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b7]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b6]">TIM8_TRG_COM_TIM14_IRQHandler</a> from irq_process.o(i.TIM8_TRG_COM_TIM14_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b5]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">TPM_To_Speed</a> from kinematics.o(i.TPM_To_Speed) referenced 2 times from kinematics.o(.data)
 <LI><a href="#[dd]">Task</a> from odometry_task.o(i.Task) referenced 14 times from odometry_task.o(i.CreateTask)
 <LI><a href="#[25]">TorqueDisable</a> from dynamixel_ax.o(i.TorqueDisable) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[24]">TorqueEnable</a> from dynamixel_ax.o(i.TorqueEnable) referenced 2 times from dynamixel_ax.o(.data)
 <LI><a href="#[bd]">UART4_IRQHandler</a> from irq_process.o(i.UART4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[be]">UART5_IRQHandler</a> from irq_process.o(i.UART5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ae]">USART1_IRQHandler</a> from irq_process.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[af]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b0]">USART3_IRQHandler</a> from irq_process.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d0]">USART6_IRQHandler</a> from irq_process.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[ec]">USART_RX_Complete_Callabck_Master</a> from dynamixel_protocol10.o(i.USART_RX_Complete_Callabck_Master) referenced 2 times from dynamixel_protocol10.o(i.Protocol)
 <LI><a href="#[f7]">USART_RX_Complete_Callabck_MasterSlave</a> from serial_protocol.o(i.USART_RX_Complete_Callabck_MasterSlave) referenced from serial_protocol.o(i.Protocol)
 <LI><a href="#[ee]">USART_RX_Complete_Callabck_Slave</a> from dynamixel_protocol10.o(i.USART_RX_Complete_Callabck_Slave) referenced 2 times from dynamixel_protocol10.o(i.Protocol)
 <LI><a href="#[ef]">USART_RX_Timeout_Callback</a> from dynamixel_protocol10.o(i.USART_RX_Timeout_Callback) referenced 3 times from dynamixel_protocol10.o(i.Protocol)
 <LI><a href="#[eb]">USART_TX_Complete_Callabck_Master</a> from dynamixel_protocol10.o(i.USART_TX_Complete_Callabck_Master) referenced 2 times from dynamixel_protocol10.o(i.Protocol)
 <LI><a href="#[f6]">USART_TX_Complete_Callabck_MasterSlave</a> from serial_protocol.o(i.USART_TX_Complete_Callabck_MasterSlave) referenced from serial_protocol.o(i.Protocol)
 <LI><a href="#[ed]">USART_TX_Complete_Callabck_Slave</a> from dynamixel_protocol10.o(i.USART_TX_Complete_Callabck_Slave) referenced 2 times from dynamixel_protocol10.o(i.Protocol)
 <LI><a href="#[17]">USARTx_GetLine</a> from usartx_communication.o(i.USARTx_GetLine) referenced 2 times from usartx_communication.o(.data)
 <LI><a href="#[e]">UpdatePath</a> from kinematics.o(i.UpdatePath) referenced 4 times from kinematics.o(.data)
 <LI><a href="#[84]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[89]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">WriteBytes</a> from serial_protocol.o(i.WriteBytes) referenced 2 times from serial_protocol.o(.data)
 <LI><a href="#[30]">Write_Cmd</a> from dynamixel_protocol10.o(i.Write_Cmd) referenced 2 times from dynamixel_protocol10.o(.data)
 <LI><a href="#[115]">ZeroState</a> from terminal_cmd_handler.o(i.ZeroState) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[fa]">Zhanibek</a> from terminal_cmd_handler.o(i.Zhanibek) referenced from terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
 <LI><a href="#[dc]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[da]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[11b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[11a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[dc]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[1e1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[11c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[125]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1e2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1e3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1e4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1e5]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1e6]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1e7]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[85]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1df]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[87]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[7f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
</UL>

<P><STRONG><a name="[141]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Master
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncWrite_Cmd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Response
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Request
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytes
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
</UL>

<P><STRONG><a name="[159]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInit
</UL>

<P><STRONG><a name="[1e9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_Master
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Slave
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1f0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>ControlButtons_Callback</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, robot_behavior_routine.o(i.ControlButtons_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ControlButtons_Callback &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_task.o(i.Task)
</UL>
<P><STRONG><a name="[c2]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq_process.o(i.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; DMA_WS2812B_IRQ_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_WS2812B_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>DMA_WS2812B_IRQ_Process</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ws2812b.o(i.DMA_WS2812B_IRQ_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_WS2812B_IRQ_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_COM
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>EXTI_Init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>FIFO_Add</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fifo_routine.o(i.FIFO_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FIFO_Add &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_MovePtr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Slave
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_MasterSlave
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
</UL>

<P><STRONG><a name="[161]"></a>FIFO_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fifo_routine.o(i.FIFO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol
</UL>

<P><STRONG><a name="[12a]"></a>FIFO_IsNotEmpty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fifo_routine.o(i.FIFO_IsNotEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TX_FIFO
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_Slave
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Request
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_MasterSlave
</UL>

<P><STRONG><a name="[1af]"></a>FIFO_IsNotFull</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fifo_routine.o(i.FIFO_IsNotFull))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Slave
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_MasterSlave
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
</UL>

<P><STRONG><a name="[142]"></a>FIFO_MovePtr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fifo_routine.o(i.FIFO_MovePtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FIFO_MovePtr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
</UL>

<P><STRONG><a name="[143]"></a>FIFO_Remove</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fifo_routine.o(i.FIFO_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_MovePtr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Request
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBytes
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next_Queue_Element
</UL>

<P><STRONG><a name="[144]"></a>GPIO_Board_Config</STRONG> (Thumb, 1156 bytes, Stack size 32 bytes, gpio_board_config.o(i.GPIO_Board_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Board_Config &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>GPIO_Robot_Config</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, gpio_robot_config.o(i.GPIO_Robot_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Robot_Config &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[45]"></a>Get_Request</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, terminal.o(i.Get_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal.o(.data)
</UL>
<P><STRONG><a name="[1ca]"></a>HB_Init</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, main.o(i.HB_Init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>HW_Clock_Config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, board_hw_config.o(i.HW_Clock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Clock_Config &rArr; LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_ReleaseReset
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_ForceReset
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>LL_DMA_Init</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f4xx_ll_dma.o(i.LL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_DMA_Init &rArr; LL_DMA_SetChannelSelection
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_SetChannelSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
</UL>

<P><STRONG><a name="[1a4]"></a>LL_DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_dma.o(i.LL_DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
</UL>

<P><STRONG><a name="[13b]"></a>LL_GPIO_Init</STRONG> (Thumb, 312 bytes, Stack size 20 bytes, stm32f4xx_ll_gpio.o(i.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Robot_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Board_Config
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[168]"></a>LL_SPI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_ll_spi.o(i.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
</UL>

<P><STRONG><a name="[167]"></a>LL_SPI_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_spi.o(i.LL_SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
</UL>

<P><STRONG><a name="[12d]"></a>MaxonsDisable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, robot_behavior_routine.o(i.MaxonsDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MaxonsDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllActuators
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlButtons_Callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Experiment
</UL>

<P><STRONG><a name="[12c]"></a>MaxonsEnable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, robot_behavior_routine.o(i.MaxonsEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MaxonsEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlButtons_Callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Experiment
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1a8]"></a>MaxonsStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, robot_behavior_routine.o(i.MaxonsStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MaxonsStop
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[82]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>ReadBytes</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, serial_protocol.o(i.ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ReadBytes &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotEmpty
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>Reset_Timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usartx_timeout.o(i.Reset_Timeout))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RX_Timeout
</UL>

<P><STRONG><a name="[163]"></a>SPI1_Board_HW_Init</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, board_hw_config.o(i.SPI1_Board_HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI1_Board_HW_Init &rArr; LL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_StructInit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>SPI_GPIO_ResetOutputPin</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, spi_gpio.o(i.SPI_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GPIO_ResetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_TXE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardReset
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchEmp
</UL>

<P><STRONG><a name="[154]"></a>SPI_GPIO_SetOutputPin</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, spi_gpio.o(i.SPI_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_TXE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardReset
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchEmp
</UL>

<P><STRONG><a name="[16e]"></a>SYSCFG_PWR_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, board_hw_config.o(i.SYSCFG_PWR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSCFG_PWR_Init &rArr; LL_APB2_GRP1_EnableClock
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>Send_Response</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, terminal.o(i.Send_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>Set_Timeout</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usartx_timeout.o(i.Set_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Set_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RX_Timeout
</UL>

<P><STRONG><a name="[17f]"></a>StopAllActuators</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, robot_behavior_routine.o(i.StopAllActuators))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StopAllActuators &rArr; MaxonsDisable
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[88]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[182]"></a>SystemClock_Config</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, board_hw_config.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemClock_Config &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[db]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>TIM14_USARTx_Timeout_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, board_hw_config.o(i.TIM14_USARTx_Timeout_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM14_USARTx_Timeout_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounterMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq_process.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_CC_IRQHandler &rArr; TIM1_Steppers_PWM_CC_IRQ_Process &rArr; TIM_IsActiveFlag_CC
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>TIM1_Steppers_PWM_CC_IRQ_Process</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stepper.o(i.TIM1_Steppers_PWM_CC_IRQ_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_Steppers_PWM_CC_IRQ_Process &rArr; TIM_IsActiveFlag_CC
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_COM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_IsActiveFlag_CC
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DisableIT_CC
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag_CC
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_IsEnabledChannel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>TIM1_Steppers_PWM_Init</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, board_hw_config.o(i.TIM1_Steppers_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM1_Steppers_PWM_Init &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounterMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockDivision
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_ConfigOutput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnablePreload
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_DisableChannel
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>TIM4_RC_Servos_0123_Init</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, board_hw_config.o(i.TIM4_RC_Servos_0123_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM4_RC_Servos_0123_Init &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounterMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnableFast
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_ConfigOutput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnablePreload
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>TIM5_RC_Servos_4567_Init</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, board_hw_config.o(i.TIM5_RC_Servos_4567_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM5_RC_Servos_4567_Init &rArr; LL_TIM_OC_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounterMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnableFast
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_ConfigOutput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnablePreload
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irq_process.o(i.TIM8_TRG_COM_TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM8_TRG_COM_TIM14_IRQHandler &rArr; USARTx_Timeout_IRQ_Process &rArr; IRQ_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Timeout_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>TIM8_WS2812B_Init</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, board_hw_config.o(i.TIM8_WS2812B_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM8_WS2812B_Init &rArr; LL_DMA_Init &rArr; LL_DMA_SetChannelSelection
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounterMode
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockDivision
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetMode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_ConfigOutput
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableDMAReq_UPDATE
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableAllOutputs
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableARRPreload
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnablePreload
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>Terminal_Cmd_Handlers_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[bd]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_process.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>UART4_RS485_Init</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, board_hw_config.o(i.UART4_RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART4_RS485_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetOverSampling
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigHalfDuplexMode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_process.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>UART5_Serial_Init</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, board_hw_config.o(i.UART5_Serial_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART5_Serial_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetOverSampling
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_process.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1bf]"></a>USART1_Terminal_Init</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, board_hw_config.o(i.USART1_Terminal_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART1_Terminal_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetOverSampling
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c0]"></a>USART3_Dynamixel_Init</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, board_hw_config.o(i.USART3_Dynamixel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART3_Dynamixel_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetOverSampling
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigHalfDuplexMode
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_process.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, irq_process.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART6_IRQHandler &rArr; USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>USART6_RS485_Init</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, board_hw_config.o(i.USART6_RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USART6_RS485_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_StructInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetTransferDirection
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetParity
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetOverSampling
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetDataWidth
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_TX
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_EnableDMAReq_RX
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigHalfDuplexMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ReleaseReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_ForceReset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>USARTx_AttachProtocol</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, usartx_communication.o(i.USARTx_AttachProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USARTx_AttachProtocol
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_GetLine
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>USARTx_IRQ_Process</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usartx_communication.o(i.USARTx_IRQ_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTx_IRQ_Process &rArr; LL_USART_ClearFlag_IDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_GetLine
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1a1]"></a>USARTx_Timeout_IRQ_Process</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usartx_timeout.o(i.USARTx_Timeout_IRQ_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTx_Timeout_IRQ_Process &rArr; IRQ_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_TRG_COM_TIM14_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>WriteBytes</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, serial_protocol.o(i.WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = WriteBytes &rArr; Transmit_Bytes &rArr; Transmit_Next_Queue_Element &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c5]"></a>arm_cos_f32</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, arm_cos_f32.o(i.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePath
</UL>

<P><STRONG><a name="[158]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_mat_init_f32.o(i.arm_mat_init_f32))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePath
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_To_Speed
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_To_TPM
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInit
</UL>

<P><STRONG><a name="[15a]"></a>arm_mat_mult_f32</STRONG> (Thumb, 320 bytes, Stack size 60 bytes, arm_mat_mult_f32.o(i.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePath
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_To_Speed
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_To_TPM
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MatrixInit
</UL>

<P><STRONG><a name="[1c6]"></a>arm_sin_f32</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, arm_sin_f32.o(i.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdatePath
</UL>

<P><STRONG><a name="[12e]"></a>driveDC</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, dc_motor.o(i.driveDC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlButtons_Callback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition2motor
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition1motor
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition01motor
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition
</UL>

<P><STRONG><a name="[da]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; USART6_RS485_Init &rArr; LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_AttachProtocol
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_PWR_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Clock_Config
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Robot_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Board_Config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HB_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1d6]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1aa]"></a>setPosition</STRONG> (Thumb, 556 bytes, Stack size 40 bytes, dc_motor.o(i.setPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setPosition &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1ad]"></a>setPosition01motor</STRONG> (Thumb, 650 bytes, Stack size 64 bytes, dc_motor.o(i.setPosition01motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = setPosition01motor &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1ab]"></a>setPosition1motor</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, dc_motor.o(i.setPosition1motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setPosition1motor &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1ac]"></a>setPosition2motor</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, dc_motor.o(i.setPosition2motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = setPosition2motor &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1cd]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1db]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos_routine_plug.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d7]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[1d5]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1cf]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1ce]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[134]"></a>vPortEnterCritical</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[13a]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1de]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[153]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardReset
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[131]"></a>vTaskResume</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroState
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sort
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePile
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OptimalSort
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrubPile
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GripperCalibration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCSort
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCConst
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1cb]"></a>vTaskStartScheduler</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>vTaskSuspend</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1d8]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>

<P><STRONG><a name="[11e]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1dc]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[12f]"></a>xTaskCreateStatic</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTask
</UL>

<P><STRONG><a name="[1a6]"></a>xTaskDelayUntil</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tasks.o(i.xTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[1a5]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task
</UL>

<P><STRONG><a name="[181]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d9]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>Disable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, l6474_drvr.o(i.Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetBaudRatePrescaler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Enable</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, l6474_drvr.o(i.Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetBaudRatePrescaler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>GetParam</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, l6474_drvr.o(i.GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetBaudRatePrescaler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_RXNE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>GetStatus</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, l6474_drvr.o(i.GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetBaudRatePrescaler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ReceiveData8
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_RXNE
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HardReset</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l6474_drvr.o(i.HardReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardReset &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDirection
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[139]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDirection
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[138]"></a>LL_SPI_IsActiveFlag_BSY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_SPI_IsActiveFlag_BSY))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[14a]"></a>LL_SPI_IsActiveFlag_RXNE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_SPI_IsActiveFlag_RXNE))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
</UL>

<P><STRONG><a name="[14b]"></a>LL_SPI_ReceiveData8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
</UL>

<P><STRONG><a name="[135]"></a>LL_SPI_SetBaudRatePrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_SPI_SetBaudRatePrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[137]"></a>LL_SPI_TransmitData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l6474_drvr.o(i.LL_SPI_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStatus
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParam
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[7]"></a>SetCurrentLimit</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, l6474_drvr.o(i.SetCurrentLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetCurrentLimit &rArr; SetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SetCurrentLimit_mA</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, l6474_drvr.o(i.SetCurrentLimit_mA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetCurrentLimit_mA &rArr; SetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SetDirection</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, l6474_drvr.o(i.SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>SetParam</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, l6474_drvr.o(i.SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetBaudRatePrescaler
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetStepMode
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit_mA
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrentLimit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SetStepMode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l6474_drvr.o(i.SetStepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetStepMode &rArr; SetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetParam
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l6474_drvr.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>MatrixInit</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, kinematics.o(i.MatrixInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MatrixInit &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinematics.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Speed_To_TPM</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, kinematics.o(i.Speed_To_TPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Speed_To_TPM &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinematics.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>TPM_To_Speed</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, kinematics.o(i.TPM_To_Speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TPM_To_Speed &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinematics.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>UpdatePath</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, kinematics.o(i.UpdatePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UpdatePath &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kinematics.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_gpio.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>

<P><STRONG><a name="[16d]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_gpio.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>

<P><STRONG><a name="[16c]"></a>LL_SPI_IsActiveFlag_BSY</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_gpio.o(i.LL_SPI_IsActiveFlag_BSY))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>

<P><STRONG><a name="[16b]"></a>LL_SPI_IsActiveFlag_TXE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi_gpio.o(i.LL_SPI_IsActiveFlag_TXE))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>

<P><STRONG><a name="[16a]"></a>LL_SPI_TransmitData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_gpio.o(i.LL_SPI_TransmitData8))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>

<P><STRONG><a name="[14f]"></a>LL_AHB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_hw_config.o(i.LL_AHB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_AHB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Clock_Config
</UL>

<P><STRONG><a name="[150]"></a>LL_AHB1_GRP1_ForceReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_AHB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Clock_Config
</UL>

<P><STRONG><a name="[151]"></a>LL_AHB1_GRP1_ReleaseReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_AHB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Clock_Config
</UL>

<P><STRONG><a name="[16f]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_hw_config.o(i.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_PWR_Init
</UL>

<P><STRONG><a name="[185]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_APB1_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[186]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[166]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board_hw_config.o(i.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_PWR_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
</UL>

<P><STRONG><a name="[164]"></a>LL_APB2_GRP1_ForceReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_APB2_GRP1_ForceReset))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
</UL>

<P><STRONG><a name="[165]"></a>LL_APB2_GRP1_ReleaseReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_APB2_GRP1_ReleaseReset))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Board_HW_Init
</UL>

<P><STRONG><a name="[19b]"></a>LL_TIM_CC_DisableChannel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_CC_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[195]"></a>LL_TIM_CC_EnablePreload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_CC_EnablePreload))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[18a]"></a>LL_TIM_EnableARRPreload</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_EnableARRPreload))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[19d]"></a>LL_TIM_EnableAllOutputs</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_EnableAllOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[19c]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_EnableCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[1a3]"></a>LL_TIM_EnableDMAReq_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_EnableDMAReq_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
</UL>

<P><STRONG><a name="[196]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[199]"></a>LL_TIM_OC_ConfigOutput</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, board_hw_config.o(i.LL_TIM_OC_ConfigOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_OC_ConfigOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[19f]"></a>LL_TIM_OC_EnableFast</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, board_hw_config.o(i.LL_TIM_OC_EnableFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_EnableFast
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
</UL>

<P><STRONG><a name="[197]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, board_hw_config.o(i.LL_TIM_OC_EnablePreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_EnablePreload
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[19a]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[198]"></a>LL_TIM_OC_SetMode</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, board_hw_config.o(i.LL_TIM_OC_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_OC_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[18b]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetAutoReload))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[194]"></a>LL_TIM_SetClockDivision</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetClockDivision))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[193]"></a>LL_TIM_SetClockSource</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
</UL>

<P><STRONG><a name="[189]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[188]"></a>LL_TIM_SetCounterMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetCounterMode))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[187]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_TIM_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_RC_Servos_4567_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_RC_Servos_0123_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[1be]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_ConfigAsyncMode))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
</UL>

<P><STRONG><a name="[1b4]"></a>LL_USART_ConfigHalfDuplexMode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_ConfigHalfDuplexMode))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1ba]"></a>LL_USART_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1bc]"></a>LL_USART_EnableDMAReq_RX</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_EnableDMAReq_RX))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1bb]"></a>LL_USART_EnableDMAReq_TX</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_EnableDMAReq_TX))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[157]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, board_hw_config.o(i.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1b7]"></a>LL_USART_SetDataWidth</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_SetDataWidth))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1b6]"></a>LL_USART_SetOverSampling</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_SetOverSampling))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1b8]"></a>LL_USART_SetParity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_SetParity))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1b5]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, board_hw_config.o(i.LL_USART_SetStopBitsLength))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[1b9]"></a>LL_USART_SetTransferDirection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, board_hw_config.o(i.LL_USART_SetTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
</UL>

<P><STRONG><a name="[18d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, board_hw_config.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[18c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, board_hw_config.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RS485_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Dynamixel_Init
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Terminal_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Serial_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_RS485_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM8_WS2812B_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_USARTx_Timeout_Init
</UL>

<P><STRONG><a name="[176]"></a>LL_DMA_ClearFlag_TC</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_DMA_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDMA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDMA
</UL>

<P><STRONG><a name="[f]"></a>LL_DMA_ClearFlag_TC0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC0))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>LL_DMA_ClearFlag_TC1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC1))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>LL_DMA_ClearFlag_TC2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC2))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>LL_DMA_ClearFlag_TC3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC3))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>LL_DMA_ClearFlag_TC4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC4))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>LL_DMA_ClearFlag_TC5</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC5))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>LL_DMA_ClearFlag_TC6</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC6))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>LL_DMA_ClearFlag_TC7</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_DMA_ClearFlag_TC7))
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTX
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRX
</UL>

<P><STRONG><a name="[178]"></a>LL_USART_ClearFlag_IDLE</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usartx_communication.o(i.LL_USART_ClearFlag_IDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_ClearFlag_IDLE
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRX
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>

<P><STRONG><a name="[179]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usartx_communication.o(i.LL_USART_ClearFlag_TC))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTX
</UL>

<P><STRONG><a name="[1d]"></a>Reset_RX_Timeout</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usartx_communication.o(i.Reset_RX_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Reset_RX_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>Set_RX_Timeout</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usartx_communication.o(i.Set_RX_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_RX_Timeout &rArr; Set_Timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>StartDMA</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usartx_communication.o(i.StartDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StartDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTX
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRX
</UL>

<P><STRONG><a name="[19]"></a>StartRX</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usartx_communication.o(i.StartRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartRX &rArr; StartDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDMA
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_IDLE
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>StartTX</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usartx_communication.o(i.StartTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = StartTX &rArr; StartDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDMA
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[180]"></a>StopDMA</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usartx_communication.o(i.StopDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StopDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTX
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRX
</UL>

<P><STRONG><a name="[1a]"></a>StopRX</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usartx_communication.o(i.StopRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StopRX &rArr; StopDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>StopTX</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usartx_communication.o(i.StopTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = StopTX &rArr; StopDMA &rArr; LL_DMA_ClearFlag_TC
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopDMA
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USARTx_GetLine</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usartx_communication.o(i.USARTx_GetLine))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_AttachProtocol
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_IRQ_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usartx_communication.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, odometry_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry_task.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, odometry_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> odometry_task.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>Task</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, odometry_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[1c4]"></a>IRQ_Process</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, usartx_timeout.o(i.IRQ_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_Timeout_IRQ_Process
</UL>

<P><STRONG><a name="[20]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, terminal_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_task.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> terminal_task.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>Task</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, terminal_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Terminal_Cmd_Handlers_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[149]"></a>Byte_To_Word16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dynamixel_ax.o(i.Byte_To_Word16))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPresentLoad
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[2d]"></a>DisableLED</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, dynamixel_ax.o(i.DisableLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DisableLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>EnableLED</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dynamixel_ax.o(i.EnableLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableLED
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>GetAngle</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, dynamixel_ax.o(i.GetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>GetPresentLoad</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, dynamixel_ax.o(i.GetPresentLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetPresentLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>Ping</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, dynamixel_ax.o(i.Ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>SetAngle</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, dynamixel_ax.o(i.SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word16_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>SetID</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, dynamixel_ax.o(i.SetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>SetJointMode</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dynamixel_ax.o(i.SetJointMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetJointMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>SetMovingSpeed</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, dynamixel_ax.o(i.SetMovingSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetMovingSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word16_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>SetWheelMode</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, dynamixel_ax.o(i.SetWheelMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetWheelMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>TorqueDisable</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, dynamixel_ax.o(i.TorqueDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TorqueDisable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>TorqueEnable</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, dynamixel_ax.o(i.TorqueEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TorqueEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_ax.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>Word16_To_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dynamixel_ax.o(i.Word16_To_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMovingSpeed
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle
</UL>

<P><STRONG><a name="[32]"></a>Action_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.Action_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>BulkRead_Cmd</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.BulkRead_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BulkRead_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>CRC_Calc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.CRC_Calc))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncWrite_Cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Cmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping_Cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketErrorCheck
</UL>

<P><STRONG><a name="[129]"></a>Check_TX_FIFO</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.Check_TX_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Check_TX_FIFO &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotEmpty
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_Master
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Timeout_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Master
</UL>

<P><STRONG><a name="[33]"></a>FactoryReset_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.FactoryReset_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[15b]"></a>PacketErrorCheck</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dynamixel_protocol10.o(i.PacketErrorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PacketErrorCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Master
</UL>

<P><STRONG><a name="[2e]"></a>Ping_Cmd</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, dynamixel_protocol10.o(i.Ping_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Ping_Cmd &rArr; Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>Protocol</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, dynamixel_protocol10.o(i.Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocol &rArr; FIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>Read_Cmd</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, dynamixel_protocol10.o(i.Read_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Read_Cmd &rArr; Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>Reboot_Cmd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.Reboot_Cmd))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>Receive_Request</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.Receive_Request))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>RegWrite_Cmd</STRONG> (Thumb, 8 bytes, Stack size 12 bytes, dynamixel_protocol10.o(i.RegWrite_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RegWrite_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[1c2]"></a>Retransmit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.Retransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Retransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Timeout_Callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Master
</UL>

<P><STRONG><a name="[37]"></a>Send_Response</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.Send_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Send_Response
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>SyncWrite_Cmd</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, dynamixel_protocol10.o(i.SyncWrite_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SyncWrite_Cmd &rArr; Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>Transmit_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dynamixel_protocol10.o(i.Transmit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotFull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncWrite_Cmd
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Cmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping_Cmd
</UL>

<P><STRONG><a name="[12b]"></a>Transmit_Next</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.Transmit_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TX_FIFO
</UL>

<P><STRONG><a name="[ec]"></a>USART_RX_Complete_Callabck_Master</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, dynamixel_protocol10.o(i.USART_RX_Complete_Callabck_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_RX_Complete_Callabck_Master &rArr; Check_TX_FIFO &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketErrorCheck
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TX_FIFO
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(i.Protocol)
</UL>
<P><STRONG><a name="[ee]"></a>USART_RX_Complete_Callabck_Slave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.USART_RX_Complete_Callabck_Slave))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(i.Protocol)
</UL>
<P><STRONG><a name="[ef]"></a>USART_RX_Timeout_Callback</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dynamixel_protocol10.o(i.USART_RX_Timeout_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART_RX_Timeout_Callback &rArr; Check_TX_FIFO &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Retransmit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TX_FIFO
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(i.Protocol)
</UL>
<P><STRONG><a name="[eb]"></a>USART_TX_Complete_Callabck_Master</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dynamixel_protocol10.o(i.USART_TX_Complete_Callabck_Master))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_TX_Complete_Callabck_Master &rArr; Check_TX_FIFO &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_TX_FIFO
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(i.Protocol)
</UL>
<P><STRONG><a name="[ed]"></a>USART_TX_Complete_Callabck_Slave</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dynamixel_protocol10.o(i.USART_TX_Complete_Callabck_Slave))
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(i.Protocol)
</UL>
<P><STRONG><a name="[30]"></a>Write_Cmd</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, dynamixel_protocol10.o(i.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Write_Cmd &rArr; Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dynamixel_protocol10.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>Byte_To_Word32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maxon.o(i.Byte_To_Word32))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTotalTicks
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTPM
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRangeTPM
</UL>

<P><STRONG><a name="[43]"></a>Disable</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, maxon.o(i.Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>Enable</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, maxon.o(i.Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>GetRangeTPM</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, maxon.o(i.GetRangeTPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetRangeTPM
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>GetTPM</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, maxon.o(i.GetTPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTPM
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>GetTotalTicks</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, maxon.o(i.GetTotalTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTotalTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>Ping</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, maxon.o(i.Ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Ping
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>SetID</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, maxon.o(i.SetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>SetRangeTPM</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, maxon.o(i.SetRangeTPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetRangeTPM
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word32_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>SetTPM</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, maxon.o(i.SetTPM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTPM
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word32_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>SetTotalTicks</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, maxon.o(i.SetTotalTicks))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetTotalTicks
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word32_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> maxon.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>Word32_To_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, maxon.o(i.Word32_To_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTotalTicks
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTPM
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRangeTPM
</UL>

<P><STRONG><a name="[101]"></a>AX_GetAngle</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_GetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_GetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word16_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[104]"></a>AX_GetLoad</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_GetLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_GetLoad
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word16_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[fc]"></a>AX_SetAngle</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_SetAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_SetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[108]"></a>AX_SetJointMode</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_SetJointMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_SetJointMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[109]"></a>AX_SetMovingSpeed</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_SetMovingSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_SetMovingSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[107]"></a>AX_SetWheelMode</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.AX_SetWheelMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AX_SetWheelMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[127]"></a>Byte_To_Word16</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Byte_To_Word16))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DC
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_SetMovingSpeed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_SetAngle
</UL>

<P><STRONG><a name="[13f]"></a>Byte_To_Word32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Byte_To_Word32))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRobotSpeed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRobotCoord
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Experiment
</UL>

<P><STRONG><a name="[130]"></a>Byte_To_Word32_s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Byte_To_Word32_s))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_stepper_angle
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCSort
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCConst
</UL>

<P><STRONG><a name="[110]"></a>CheckEncoder</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.CheckEncoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckEncoder
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word8_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10e]"></a>DC</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.DC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DC &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10f]"></a>DCConst</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.DCConst))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCConst &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[111]"></a>DCSort</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.DCSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DCSort &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10d]"></a>Experiment</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.Experiment))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Experiment &rArr; MaxonsEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsEnable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsDisable
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[100]"></a>GetRobotCoord</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.GetRobotCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetRobotCoord
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word32_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[fe]"></a>GetRobotSpeed</STRONG> (Thumb, 70 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.GetRobotSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GetRobotSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word32_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[118]"></a>GripperCalibration</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.GripperCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GripperCalibration &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[102]"></a>GrubPile</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.GrubPile))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GrubPile &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[105]"></a>GrubPileSatus</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, terminal_cmd_handler.o(i.GrubPileSatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GrubPileSatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word8_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[15f]"></a>LL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, terminal_cmd_handler.o(i.LL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Punch
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ping
</UL>

<P><STRONG><a name="[116]"></a>OpenGate</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.OpenGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OpenGate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[114]"></a>OptimalSort</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.OptimalSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OptimalSort &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[f9]"></a>Ping</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, terminal_cmd_handler.o(i.Ping))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Ping &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[fb]"></a>Punch</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, terminal_cmd_handler.o(i.Punch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Punch &rArr; LL_GPIO_TogglePin
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_TogglePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[103]"></a>ReleasePile</STRONG> (Thumb, 48 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.ReleasePile))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ReleasePile &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[106]"></a>ReleasePileSatus</STRONG> (Thumb, 164 bytes, Stack size 72 bytes, terminal_cmd_handler.o(i.ReleasePileSatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ReleasePileSatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word8_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10a]"></a>SetPWM</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.SetPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word16
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[ff]"></a>SetRobotCoord</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.SetRobotCoord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetRobotCoord
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[fd]"></a>SetRobotSpeed</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, terminal_cmd_handler.o(i.SetRobotSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetRobotSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10b]"></a>Set_stepper_angle</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.Set_stepper_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_stepper_angle
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32_s
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[112]"></a>Sort</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.Sort))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sort &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[113]"></a>SortSatus</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, terminal_cmd_handler.o(i.SortSatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SortSatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word8_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[119]"></a>StartGame</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, terminal_cmd_handler.o(i.StartGame))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartGame
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Word8_To_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[10c]"></a>Stop_stepper</STRONG> (Thumb, 42 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.Stop_stepper))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Stop_stepper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[117]"></a>SwitchEmp</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.SwitchEmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SwitchEmp &rArr; SPI_GPIO_SetOutputPin
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_SetOutputPin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_ResetOutputPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[126]"></a>Word16_To_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Word16_To_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_GetLoad
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX_GetAngle
</UL>

<P><STRONG><a name="[14d]"></a>Word32_To_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Word32_To_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRobotSpeed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRobotCoord
</UL>

<P><STRONG><a name="[128]"></a>Word8_To_Byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, terminal_cmd_handler.o(i.Word8_To_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartGame
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SortSatus
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleasePileSatus
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrubPileSatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEncoder
</UL>

<P><STRONG><a name="[115]"></a>ZeroState</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, terminal_cmd_handler.o(i.ZeroState))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ZeroState &rArr; vTaskResume &rArr; prvTaskIsTaskSuspended
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[fa]"></a>Zhanibek</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, terminal_cmd_handler.o(i.Zhanibek))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Zhanibek
</UL>
<BR>[Address Reference Count : 1]<UL><LI> terminal_cmd_handler.o(i.Terminal_Cmd_Handlers_Init)
</UL>
<P><STRONG><a name="[4f]"></a>Disable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stepper.o(i.Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>Enable</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stepper.o(i.Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>GetPresentPosisition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stepper.o(i.GetPresentPosisition))
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stepper.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>LL_TIM_GenerateEvent_COM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stepper.o(i.LL_TIM_GenerateEvent_COM))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepToPosisition
</UL>

<P><STRONG><a name="[46]"></a>Motor1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stepper.o(i.Motor1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor1_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>Motor2_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stepper.o(i.Motor2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>Motor3_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stepper.o(i.Motor3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor3_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>Motor4_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stepper.o(i.Motor4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Motor4_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>SetZeroPosisition</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stepper.o(i.SetZeroPosisition))
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>StepToPosisition</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stepper.o(i.StepToPosisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StepToPosisition &rArr; TIM_EnableIT_CC
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_COM
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EnableIT_CC
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_EnableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>Stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stepper.o(i.Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stop &rArr; TIM_DisableIT_CC
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_COM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DisableIT_CC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_DisableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stepper.o(.data)
</UL>
<P><STRONG><a name="[17d]"></a>TIM_CC_DisableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i.TIM_CC_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>

<P><STRONG><a name="[17a]"></a>TIM_CC_EnableChannel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stepper.o(i.TIM_CC_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepToPosisition
</UL>

<P><STRONG><a name="[191]"></a>TIM_CC_IsEnabledChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stepper.o(i.TIM_CC_IsEnabledChannel))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
</UL>

<P><STRONG><a name="[190]"></a>TIM_ClearFlag_CC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stepper.o(i.TIM_ClearFlag_CC))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
</UL>

<P><STRONG><a name="[17e]"></a>TIM_DisableIT_CC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper.o(i.TIM_DisableIT_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DisableIT_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop
</UL>

<P><STRONG><a name="[17c]"></a>TIM_EnableIT_CC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stepper.o(i.TIM_EnableIT_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_EnableIT_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepToPosisition
</UL>

<P><STRONG><a name="[18f]"></a>TIM_IsActiveFlag_CC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stepper.o(i.TIM_IsActiveFlag_CC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_IsActiveFlag_CC
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_Steppers_PWM_CC_IRQ_Process
</UL>

<P><STRONG><a name="[55]"></a>Disable</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, rc_servo.o(i.Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Disable &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_DisableChannel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_servo.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>Enable</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, rc_servo.o(i.Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Enable &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CC_EnableChannel
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_servo.o(.data)
</UL>
<P><STRONG><a name="[13d]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rc_servo.o(i.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[52]"></a>SetMotorSpeed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rc_servo.o(i.SetMotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetMotorSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC_SetCompareCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_servo.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>SetPWMDutyCycle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rc_servo.o(i.SetPWMDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPWMDutyCycle
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC_SetCompareCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_servo.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>SetServoAngle</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rc_servo.o(i.SetServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetServoAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC_SetCompareCH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rc_servo.o(.data)
</UL>
<P><STRONG><a name="[13c]"></a>TIM_CC_DisableChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rc_servo.o(i.TIM_CC_DisableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable
</UL>

<P><STRONG><a name="[13e]"></a>TIM_CC_EnableChannel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rc_servo.o(i.TIM_CC_EnableChannel))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable
</UL>

<P><STRONG><a name="[172]"></a>TIM_OC_SetCompareCH</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rc_servo.o(i.TIM_OC_SetCompareCH))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPWMDutyCycle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
</UL>

<P><STRONG><a name="[145]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio_board_config.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Board_Config
</UL>

<P><STRONG><a name="[146]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio_board_config.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Board_Config
</UL>

<P><STRONG><a name="[15e]"></a>CRC_Calc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hl_new.o(i.CRC_Calc))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Response
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketErrorCheck
</UL>

<P><STRONG><a name="[57]"></a>Get_Request</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, hl_new.o(i.Get_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Get_Request &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotEmpty
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>PacketErrorCheck</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hl_new.o(i.PacketErrorCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PacketErrorCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RX_Complete_Callabck_Slave
</UL>

<P><STRONG><a name="[58]"></a>Protocol</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, hl_new.o(i.Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocol &rArr; FIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>Send_Response</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, hl_new.o(i.Send_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Send_Response &rArr; Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>Transmit_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, hl_new.o(i.Transmit_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Transmit_Cmd &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotFull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Response
</UL>

<P><STRONG><a name="[1b1]"></a>Transmit_Next</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hl_new.o(i.Transmit_Next))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_Slave
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Cmd
</UL>

<P><STRONG><a name="[f2]"></a>USART_RX_Complete_Callabck_Master</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hl_new.o(i.USART_RX_Complete_Callabck_Master))
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(i.Protocol)
</UL>
<P><STRONG><a name="[f4]"></a>USART_RX_Complete_Callabck_Slave</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, hl_new.o(i.USART_RX_Complete_Callabck_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_RX_Complete_Callabck_Slave &rArr; FIFO_Add &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotFull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PacketErrorCheck
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(i.Protocol)
</UL>
<P><STRONG><a name="[f0]"></a>USART_RX_Timeout_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hl_new.o(i.USART_RX_Timeout_Callback))
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(i.Protocol)
</UL>
<P><STRONG><a name="[f1]"></a>USART_TX_Complete_Callabck_Master</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hl_new.o(i.USART_TX_Complete_Callabck_Master))
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(i.Protocol)
</UL>
<P><STRONG><a name="[f3]"></a>USART_TX_Complete_Callabck_Slave</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hl_new.o(i.USART_TX_Complete_Callabck_Slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART_TX_Complete_Callabck_Slave &rArr; Transmit_Next &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotEmpty
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hl_new.o(i.Protocol)
</UL>
<P><STRONG><a name="[133]"></a>LL_TIM_GenerateEvent_COM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ws2812b.o(i.LL_TIM_GenerateEvent_COM))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_WS2812B_IRQ_Process
</UL>

<P><STRONG><a name="[5b]"></a>GetCoord</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, odometry.o(i.GetCoord))
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>GetSpeed</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, odometry.o(i.GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, odometry.o(i.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>SetCoord</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, odometry.o(i.SetCoord))
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>SetSpeed</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, odometry.o(i.SetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSpeed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>UpdatePath</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, odometry.o(i.UpdatePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UpdatePath
</UL>
<BR>[Address Reference Count : 1]<UL><LI> odometry.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>AddButton</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, button.o(i.AddButton))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AddButton
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>GetState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, button.o(i.GetState))
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>PollButtons</STRONG> (Thumb, 588 bytes, Stack size 16 bytes, button.o(i.PollButtons))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PollButtons
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>CreateTask</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, button_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_task.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, button_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> button_task.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>Task</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, button_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Task &rArr; xTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> button_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[64]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, game_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game_task.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, game_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> game_task.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>Task</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, game_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopAllActuators
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsStop
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaxonsEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[66]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, grub_pile_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grub_pile_task.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, grub_pile_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> grub_pile_task.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>Task</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, grub_pile_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> grub_pile_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[68]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, release_pile_task.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> release_pile_task.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, release_pile_task.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> release_pile_task.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>Task</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, release_pile_task.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> release_pile_task.o(i.CreateTask)
</UL>
<P><STRONG><a name="[6a]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_dc.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_dc.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_dc.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>Task</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, task_dc.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc.o(i.CreateTask)
</UL>
<P><STRONG><a name="[148]"></a>Byte_To_Word32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, encoder_board_drvr.o(i.Byte_To_Word32))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEncoderCounts
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAllEncoderCounts
</UL>

<P><STRONG><a name="[6d]"></a>GetAllEncoderCounts</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, encoder_board_drvr.o(i.GetAllEncoderCounts))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetAllEncoderCounts
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> encoder_board_drvr.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>GetEncoderCounts</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, encoder_board_drvr.o(i.GetEncoderCounts))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetEncoderCounts
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Byte_To_Word32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> encoder_board_drvr.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>Protocol</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, serial_protocol.o(i.Protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocol &rArr; FIFO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(.data)
</UL>
<P><STRONG><a name="[1ae]"></a>Transmit_Bytes</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, serial_protocol.o(i.Transmit_Bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Transmit_Bytes &rArr; Transmit_Next_Queue_Element &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotFull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next_Queue_Element
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBytes
</UL>

<P><STRONG><a name="[1b0]"></a>Transmit_Next_Queue_Element</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, serial_protocol.o(i.Transmit_Next_Queue_Element))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Transmit_Next_Queue_Element &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TX_Complete_Callabck_MasterSlave
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Bytes
</UL>

<P><STRONG><a name="[f7]"></a>USART_RX_Complete_Callabck_MasterSlave</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial_protocol.o(i.USART_RX_Complete_Callabck_MasterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_RX_Complete_Callabck_MasterSlave &rArr; FIFO_Add &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotFull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_Add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(i.Protocol)
</UL>
<P><STRONG><a name="[f5]"></a>USART_RX_Timeout_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_protocol.o(i.USART_RX_Timeout_Callback))
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(i.Protocol)
</UL>
<P><STRONG><a name="[f6]"></a>USART_TX_Complete_Callabck_MasterSlave</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, serial_protocol.o(i.USART_TX_Complete_Callabck_MasterSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_TX_Complete_Callabck_MasterSlave &rArr; Transmit_Next_Queue_Element &rArr; FIFO_Remove &rArr; FIFO_MovePtr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIFO_IsNotEmpty
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Transmit_Next_Queue_Element
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_protocol.o(i.Protocol)
</UL>
<P><STRONG><a name="[1c8]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dc_motor.o(i.LL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>

<P><STRONG><a name="[1c7]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dc_motor.o(i.LL_GPIO_SetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driveDC
</UL>

<P><STRONG><a name="[71]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_dc1.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc1.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_dc1.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_dc1.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>Task</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, task_dc1.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition1motor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc1.o(i.CreateTask)
</UL>
<P><STRONG><a name="[73]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_dc2.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc2.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_dc2.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_dc2.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>Task</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, task_dc2.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition2motor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc2.o(i.CreateTask)
</UL>
<P><STRONG><a name="[75]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_dc0.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc0.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_dc0.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_dc0.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>Task</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, task_dc0.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task &rArr; setPosition01motor &rArr; driveDC
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPosition01motor
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_dc0.o(i.CreateTask)
</UL>
<P><STRONG><a name="[77]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_sort.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sort.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_sort.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_sort.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>Task</STRONG> (Thumb, 4810 bytes, Stack size 24 bytes, task_sort.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sort.o(i.CreateTask)
</UL>
<P><STRONG><a name="[79]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_sort_optimize.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sort_optimize.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_sort_optimize.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_sort_optimize.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>Task</STRONG> (Thumb, 4662 bytes, Stack size 24 bytes, task_sort_optimize.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_sort_optimize.o(i.CreateTask)
</UL>
<P><STRONG><a name="[7b]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_zero_state.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_zero_state.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_zero_state.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_zero_state.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>Task</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, task_zero_state.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_zero_state.o(i.CreateTask)
</UL>
<P><STRONG><a name="[7d]"></a>CreateTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, task_gripper_calibration.o(i.CreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CreateTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_gripper_calibration.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>GetTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, task_gripper_calibration.o(i.GetTaskHandle))
<BR>[Address Reference Count : 1]<UL><LI> task_gripper_calibration.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>Task</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, task_gripper_calibration.o(i.Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Task &rArr; vTaskSuspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task_gripper_calibration.o(i.CreateTask)
</UL>
<P><STRONG><a name="[156]"></a>LL_DMA_SetChannelSelection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_ll_dma.o(i.LL_DMA_SetChannelSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_DMA_SetChannelSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_DMA_Init
</UL>

<P><STRONG><a name="[1cc]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
</UL>

<P><STRONG><a name="[1d0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1d2]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCheckTasksWaitingTermination
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1d3]"></a>prvDeleteTCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[11b]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1d4]"></a>prvInitialiseNewTask</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[1d1]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1dd]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1da]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTaskIsTaskSuspended
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[11a]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
